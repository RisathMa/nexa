version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CORS_ORIGIN=http://localhost:3000
      - DB_PATH=./data/ai_agent.db
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./data:/app/data
    networks:
      - nexa-network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - nexa-network
    depends_on:
      - backend
    restart: unless-stopped

  # Database (SQLite - for development)
  # In production, you might want to use PostgreSQL or MySQL
  database:
    image: alpine:latest
    command: sh -c "apk add --no-cache sqlite && mkdir -p /data && sqlite3 /data/ai_agent.db 'CREATE TABLE IF NOT EXISTS conversations (id TEXT PRIMARY KEY, title TEXT, context TEXT, created_at TEXT, updated_at TEXT); CREATE TABLE IF NOT EXISTS messages (id TEXT PRIMARY KEY, conversation_id TEXT, role TEXT, content TEXT, metadata TEXT, timestamp TEXT);' && tail -f /dev/null"
    volumes:
      - ./data:/data
    networks:
      - nexa-network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nexa-network
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - nexa-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  redis_data:

networks:
  nexa-network:
    driver: bridge
